// Script interactivo para configurar las APIs de IA
const fs = require("fs");
const path = require("path");
const readline = require("readline");

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function setupAPIs() {
  console.log(
    "üöÄ Configuraci√≥n de APIs de IA para Detector de Noticias Falsas"
  );
  console.log("=".repeat(60));
  console.log("Este script te ayudar√° a configurar las APIs de IA necesarias.");
  console.log("Puedes configurar una, varias o todas las APIs disponibles.\n");

  const envPath = path.join(__dirname, ".env");
  const envExamplePath = path.join(__dirname, "env.example");

  // Verificar si existe .env.example
  if (!fs.existsSync(envExamplePath)) {
    console.error("‚ùå No se encontr√≥ el archivo .env.example");
    console.log(
      "Por favor, aseg√∫rate de que el archivo .env.example existe en el directorio backend/"
    );
    process.exit(1);
  }

  // Leer .env.example como base
  let envContent = fs.readFileSync(envExamplePath, "utf8");

  console.log("üìã APIs disponibles:");
  console.log("1. Hugging Face BERT - An√°lisis de sentimientos");
  console.log("2. Google Gemini - An√°lisis de texto avanzado");
  console.log("3. Configurar ambas APIs");
  console.log("4. Solo an√°lisis local (sin APIs externas)\n");

  const choice = await question("Selecciona una opci√≥n (1-4): ");

  let huggingfaceKey = "";
  let perspectiveKey = "";

  switch (choice) {
    case "1":
      console.log("\nü§ó Configurando Hugging Face API...");
      console.log(
        "Obt√©n tu API key en: https://huggingface.co/settings/tokens"
      );
      huggingfaceKey = await question("Ingresa tu Hugging Face API Key: ");
      break;

    case "2":
      console.log("\nüîç Configurando Google Gemini API...");
      console.log(
        "Obt√©n tu API key en: https://makersuite.google.com/app/apikey"
      );
      perspectiveKey = await question("Ingresa tu Google Gemini API Key: ");
      break;

    case "3":
      console.log("\nüîÑ Configurando ambas APIs...");
      console.log("Obt√©n tus API keys en:");
      console.log("- Hugging Face: https://huggingface.co/settings/tokens");
      console.log("- Google Gemini: https://makersuite.google.com/app/apikey");

      huggingfaceKey = await question("Ingresa tu Hugging Face API Key: ");
      perspectiveKey = await question("Ingresa tu Google Gemini API Key: ");
      break;

    case "4":
      console.log("\n‚úÖ Configurando solo an√°lisis local...");
      console.log(
        "El sistema funcionar√° con el an√°lisis local sin APIs externas."
      );
      break;

    default:
      console.log("‚ùå Opci√≥n inv√°lida");
      process.exit(1);
  }

  if (huggingfaceKey) {
    envContent = envContent.replace(
      /HUGGINGFACE_API_KEY=.*/,
      `HUGGINGFACE_API_KEY=${huggingfaceKey}`
    );
    envContent = envContent.replace(
      /HUGGINGFACE_ENABLED=.*/,
      "HUGGINGFACE_ENABLED=true"
    );
  }

  if (perspectiveKey) {
    envContent = envContent.replace(
      /GEMINI_API_KEY=.*/,
      `GEMINI_API_KEY=${perspectiveKey}`
    );
    envContent = envContent.replace(/GEMINI_ENABLED=.*/, "GEMINI_ENABLED=true");
  }

  // Escribir el archivo .env
  try {
    fs.writeFileSync(envPath, envContent);
    console.log("\n‚úÖ Archivo .env creado exitosamente!");

    console.log("\nüìä Resumen de configuraci√≥n:");

    console.log(
      `   - Hugging Face: ${
        huggingfaceKey ? "‚úÖ Configurado" : "‚ùå No configurado"
      }`
    );
    console.log(
      `   - Google Gemini: ${
        perspectiveKey ? "‚úÖ Configurado" : "‚ùå No configurado"
      }`
    );

    console.log("\nüöÄ Pr√≥ximos pasos:");
    console.log("1. Reinicia el servidor backend: npm run dev");
    console.log("2. Ejecuta las pruebas: node test-ai-apis.js");
    console.log("3. Prueba el sistema completo: node test-system.js");

    if (huggingfaceKey || perspectiveKey) {
      console.log("\n‚ö†Ô∏è  Notas importantes:");
      console.log("- Las APIs pueden tener costos asociados");
      console.log("- Revisa los l√≠mites de uso en cada plataforma");
      console.log(
        "- El an√°lisis local siempre estar√° disponible como respaldo"
      );
    }
  } catch (error) {
    console.error("‚ùå Error al crear el archivo .env:", error.message);
    process.exit(1);
  }

  rl.close();
}

// Funci√≥n para mostrar informaci√≥n sobre las APIs
function showAPIInfo() {
  console.log("\nüìö Informaci√≥n sobre las APIs:");
  console.log("=".repeat(40));

  console.log("\nü§ó Hugging Face BERT:");
  console.log("- An√°lisis de sentimientos y emociones");
  console.log("- Detecci√≥n de polaridad en el texto");
  console.log("- Modelo multiling√ºe (espa√±ol incluido)");
  console.log("- Costo: Gratuito (con l√≠mites)");

  console.log("\nüîç Google Gemini:");
  console.log("- An√°lisis de texto avanzado con IA");
  console.log("- Detecci√≥n de patrones de noticias falsas");
  console.log("- Explicaciones detalladas de los resultados");
  console.log("- Costo: Gratuito (con l√≠mites generosos)");

  console.log("\nüîß An√°lisis Local:");
  console.log("- Algoritmos heur√≠sticos locales");
  console.log("- Detecci√≥n de patrones b√°sicos");
  console.log("- Sin costos ni dependencias externas");
  console.log("- Siempre disponible como respaldo");
}

// Verificar si el usuario quiere informaci√≥n
async function main() {
  const showInfo = await question(
    "¬øQuieres ver informaci√≥n sobre las APIs? (s/n): "
  );

  if (showInfo.toLowerCase() === "s" || showInfo.toLowerCase() === "si") {
    showAPIInfo();
  }

  await setupAPIs();
}

main().catch(console.error);
