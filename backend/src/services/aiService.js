const axios = require("axios");
const { getAnalysisConfig } = require("../config/ai-config");
const { verifyNews } = require("./verificationService");

// Configuraci√≥n de APIs
const config = getAnalysisConfig();

// Funci√≥n principal de an√°lisis con m√∫ltiples APIs
const analyzeText = async text => {
  try {
    console.log("ü§ñ Iniciando an√°lisis avanzado con verificaci√≥n externa...");

    // Detectar si es URL o texto
    const isUrl = text.startsWith("http://") || text.startsWith("https://");

    // Solo an√°lisis avanzado con IA y verificaci√≥n externa
    const results = {
      local: null, // Eliminado
      huggingface: null,
      gemini: null,
    };

    // An√°lisis paralelo con APIs disponibles (Modo Autom√°tico)
    const promises = [];

    // Hugging Face Analysis (Autom√°tico si est√° disponible)
    if (config.huggingface.enabled && config.analysis.autoEnable.huggingface) {
      promises.push(
        analyzeWithHuggingFace(text)
          .then(result => {
            results.huggingface = result;
            console.log("‚úÖ Hugging Face analysis completed");
          })
          .catch(error => {
            console.warn("‚ùå Hugging Face API error:", error.message);
            results.huggingface = null;
          })
      );
    }

    // Google Gemini Analysis (Autom√°tico si est√° disponible)
    if (config.gemini.enabled && config.analysis.autoEnable.gemini) {
      promises.push(
        analyzeWithGemini(text)
          .then(result => {
            results.gemini = result;
            console.log("‚úÖ Google Gemini analysis completed");
          })
          .catch(error => {
            console.warn("‚ùå Google Gemini API error:", error.message);
            results.gemini = null;
          })
      );
    }

    // Verificaci√≥n externa (Autom√°tico si est√° disponible)
    let verificationResults = null;
    if (
      (config.verification.enabled || config.sourceAnalysis.enabled) &&
      config.analysis.autoEnable.verification
    ) {
      promises.push(
        verifyNews(text, isUrl)
          .then(result => {
            verificationResults = result;
            console.log("‚úÖ External verification completed");
          })
          .catch(error => {
            console.warn("‚ùå Verificaci√≥n externa error:", error.message);
            verificationResults = null;
          })
      );
    }

    // Esperar a que todas las APIs respondan (con timeout)
    if (promises.length > 0) {
      await Promise.allSettled(promises);
    }

    // Combinar resultados
    const finalResult = combineAllAnalysis(results, verificationResults, isUrl);

    console.log("‚úÖ An√°lisis avanzado completado con √©xito");
    return finalResult;
  } catch (error) {
    console.error("‚ùå Error en an√°lisis:", error);
    throw new Error("Error al analizar el texto");
  }
};

// An√°lisis local mejorado
const performLocalAnalysis = text => {
  const lowerText = text.toLowerCase();
  const factors = [];
  let fakeScore = 0;

  // 1. An√°lisis de palabras sensacionalistas
  const sensationalWords = [
    "incre√≠ble",
    "sorprendente",
    "impactante",
    "esc√°ndalo",
    "exclusivo",
    "urgente",
    "breaking",
    "shock",
    "revelaci√≥n",
    "denuncia",
    "alerta",
    "peligro",
    "crisis",
    "emergencia",
    "cat√°strofe",
    "desastre",
  ];

  const sensationalCount = sensationalWords.filter(word =>
    lowerText.includes(word)
  ).length;

  if (sensationalCount > 2) {
    factors.push({
      name: "Lenguaje Sensacionalista",
      description: `Se encontraron ${sensationalCount} palabras sensacionalistas`,
      impact: "high",
      score: Math.min(25, sensationalCount * 5),
    });
    fakeScore += Math.min(25, sensationalCount * 5);
  }

  // 2. An√°lisis de may√∫sculas
  const upperCaseRatio = (text.match(/[A-Z]/g) || []).length / text.length;
  if (upperCaseRatio > 0.1) {
    factors.push({
      name: "Uso Excesivo de May√∫sculas",
      description: `${Math.round(
        upperCaseRatio * 100
      )}% del texto est√° en may√∫sculas`,
      impact: "medium",
      score: Math.min(15, upperCaseRatio * 100),
    });
    fakeScore += Math.min(15, upperCaseRatio * 100);
  }

  // 3. An√°lisis de urgencia
  const urgencyWords = [
    "ahora",
    "urgente",
    "inmediato",
    "ya",
    "r√°pido",
    "pronto",
  ];
  const urgencyCount = urgencyWords.filter(word =>
    lowerText.includes(word)
  ).length;

  if (urgencyCount > 1) {
    factors.push({
      name: "Lenguaje de Urgencia",
      description: "Uso excesivo de palabras que crean urgencia",
      impact: "medium",
      score: Math.min(10, urgencyCount * 3),
    });
    fakeScore += Math.min(10, urgencyCount * 3);
  }

  // 4. An√°lisis de fuentes
  const sourcePatterns = [
    /fuente/i,
    /seg√∫n/i,
    /reporta/i,
    /informa/i,
    /declara/i,
    /afirma/i,
    /confirma/i,
    /revela/i,
    /anuncia/i,
    /comunica/i,
  ];
  const hasSources = sourcePatterns.some(pattern => pattern.test(text));

  if (!hasSources) {
    factors.push({
      name: "Falta de Fuentes",
      description: "No se mencionan fuentes espec√≠ficas o citas",
      impact: "high",
      score: 20,
    });
    fakeScore += 20;
  }

  // 5. An√°lisis de longitud
  if (text.length < 100) {
    factors.push({
      name: "Texto Muy Corto",
      description: "El texto es demasiado breve para ser una noticia completa",
      impact: "medium",
      score: 10,
    });
    fakeScore += 10;
  }

  // 6. An√°lisis de repetici√≥n
  const words = text
    .toLowerCase()
    .split(/\s+/)
    .filter(word => word.length > 3);
  const wordCount = {};
  words.forEach(word => {
    wordCount[word] = (wordCount[word] || 0) + 1;
  });

  const repeatedWords = Object.entries(wordCount).filter(
    ([, count]) => count > 3
  ).length;

  if (repeatedWords > 2) {
    factors.push({
      name: "Repetici√≥n Excesiva",
      description: "Uso repetitivo de palabras clave",
      impact: "low",
      score: Math.min(5, repeatedWords * 2),
    });
    fakeScore += Math.min(5, repeatedWords * 2);
  }

  // 7. An√°lisis de puntuaci√≥n excesiva
  const excessivePunctuation = (text.match(/[!]{2,}|[?]{2,}/g) || []).length;
  if (excessivePunctuation > 0) {
    factors.push({
      name: "Puntuaci√≥n Excesiva",
      description: "Uso excesivo de signos de exclamaci√≥n o interrogaci√≥n",
      impact: "medium",
      score: Math.min(10, excessivePunctuation * 3),
    });
    fakeScore += Math.min(10, excessivePunctuation * 3);
  }

  // 8. An√°lisis de n√∫meros y fechas
  const hasSpecificDetails = /\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2}:\d{2}|\d{4}/.test(
    text
  );
  if (!hasSpecificDetails) {
    factors.push({
      name: "Falta de Detalles Espec√≠ficos",
      description: "No se mencionan fechas, horas o n√∫meros espec√≠ficos",
      impact: "medium",
      score: 8,
    });
    fakeScore += 8;
  }

  // Calcular confianza final
  const confidence = Math.min(95, Math.max(5, fakeScore));
  const isFake = confidence > 60;

  return {
    isFake,
    confidence: Math.round(confidence),
    factors,
    model: "Local Analysis v2.0",
    details: {
      sensationalWords: sensationalCount,
      upperCaseRatio: Math.round(upperCaseRatio * 100),
      urgencyWords: urgencyCount,
      hasSources,
      textLength: text.length,
      repeatedWords,
      excessivePunctuation,
      hasSpecificDetails,
    },
  };
};

// An√°lisis con Hugging Face
const analyzeWithHuggingFace = async text => {
  if (!config.huggingface.enabled) {
    throw new Error("Hugging Face API no est√° habilitada");
  }

  try {
    console.log("üîç Analizando con Hugging Face...");

    const response = await axios.post(
      `https://api-inference.huggingface.co/models/${config.huggingface.model}`,
      { inputs: text },
      {
        headers: {
          Authorization: `Bearer ${config.huggingface.apiKey}`,
          "Content-Type": "application/json",
        },
        timeout: config.analysis.timeouts.huggingface,
      }
    );

    // Procesar respuesta de Hugging Face
    const result = processHuggingFaceResponse(response.data, text);

    console.log("‚úÖ Hugging Face analysis completed");
    return {
      ...result,
      source: "Hugging Face",
      model: config.huggingface.model,
    };
  } catch (error) {
    console.error("‚ùå Hugging Face API error:", error.message);
    throw new Error(`Error al analizar con Hugging Face: ${error.message}`);
  }
};

// Procesar respuesta de Hugging Face con an√°lisis avanzado
const processHuggingFaceResponse = data => {
  let sentiment = "neutral";
  let confidence = 50;

  if (Array.isArray(data) && data.length > 0) {
    const firstResult = data[0];

    if (firstResult.label) {
      sentiment = firstResult.label.toLowerCase();
    }

    if (firstResult.score) {
      confidence = Math.round(firstResult.score * 100);
    }
  }

  // Determinar si es fake basado en sentimiento
  const isFake = sentiment.includes("negative") || sentiment.includes("toxic");
  const fakeConfidence = isFake ? confidence : 100 - confidence;

  return {
    isFake,
    confidence: fakeConfidence,
    factors: [
      {
        name: "An√°lisis de Sentimiento (HuggingFace)",
        description: `Sentimiento ${sentiment} detectado con ${confidence}% de precisi√≥n usando modelo BERT multilingual. ${isFake ? "Sentimiento negativo puede indicar contenido manipulador." : "Sentimiento neutral/positivo sugiere contenido objetivo."}`,
        impact: isFake ? "high" : "medium",
        technicalDetails: {
          model: "BERT Multilingual Sentiment",
          sentimentScore: confidence,
          classification: sentiment,
        },
      },
    ],
    explanation: `HuggingFace (BERT) analiz√≥ el sentimiento del texto y detect√≥ ${sentiment} con ${confidence}% de confianza. ${isFake ? "El sentimiento negativo/t√≥xico puede indicar contenido manipulador o sesgado t√≠pico de desinformaci√≥n." : "El sentimiento neutral/positivo es consistente con contenido informativo objetivo."}`,
    technicalSummary: {
      sentimentAnalysis: { sentiment, confidence },
      modelUsed: "nlptown/bert-base-multilingual-uncased-sentiment",
      overallAssessment: isFake
        ? "Sentimiento sospechoso"
        : "Sentimiento normal",
    },
  };
};

// An√°lisis con Google Gemini 2.0 Flash - Profesional y Comprensible
const analyzeWithGemini = async text => {
  if (!config.gemini.enabled) {
    throw new Error("Google Gemini API no est√° habilitada");
  }

  try {
    console.log("üîç Analizando con Google Gemini 2.0 Flash...");

    const systemPrompt = `Eres un experto verificador de noticias con acceso a capacidades de b√∫squeda web. Tu trabajo es analizar informaci√≥n y validarla contra fuentes reales en internet.

MISI√ìN: Detectar desinformaci√≥n, noticias falsas, y contenido generado por IA mediante verificaci√≥n cruzada con fuentes web confiables.

PROCESO DE AN√ÅLISIS OBLIGATORIO:
1. **VERIFICACI√ìN DE FUENTES**: Analiza si las fuentes mencionadas existen y son confiables
2. **B√öSQUEDA DE SIMILITUD**: Busca informaci√≥n similar en medios reconocidos
3. **DETECCI√ìN DE IA**: Identifica patrones t√≠picos de contenido generado artificialmente
4. **FACT-CHECKING**: Verifica hechos, fechas, personas y eventos mencionados
5. **AN√ÅLISIS DE CREDIBILIDAD**: Eval√∫a la reputaci√≥n de las fuentes citadas

CLASIFICACI√ìN AVANZADA - TIPOS DE CONTENIDO:

CONTENIDO GENERADO POR IA (Se√±ales espec√≠ficas):
- Texto excesivamente pulido sin errores naturales
- Estructura demasiado perfecta y sim√©trica
- Falta de detalles locales espec√≠ficos (direcciones exactas, nombres completos)
- Uso de frases gen√©ricas como "seg√∫n expertos" sin nombres
- Informaci√≥n que suena plausible pero no es verificable
- Ausencia de contradicciones o matices humanos naturales
- Fechas recientes sin contexto hist√≥rico verificable

NOTICIA FALSA/DESINFORMACI√ìN (Se√±ales espec√≠ficas):
- Informaci√≥n contradice fuentes establecidas
- Eventos que no aparecen en medios confiables
- Fuentes citadas que no existen o son inventadas
- Afirmaciones extraordinarias sin evidencia extraordinaria
- Sesgo extremo o lenguaje polarizante
- Informaci√≥n dise√±ada para generar emociones fuertes

INFORMACI√ìN REAL/VERIFICABLE (Se√±ales espec√≠ficas):
- Fuentes citadas que existen y son verificables
- Detalles espec√≠ficos que coinciden con registros p√∫blicos
- Presencia en m√∫ltiples medios confiables
- Contexto hist√≥rico consistente
- Errores menores t√≠picos de contenido humano
- Matices y contradicciones naturales

VERIFICACI√ìN WEB OBLIGATORIA:
- Buscar la noticia en medios establecidos (BBC, Reuters, AP, etc.)
- Verificar existencia de personas/organizaciones mencionadas
- Confirmar fechas y eventos contra registros p√∫blicos
- Buscar desmentidos o fact-checks existentes

FORMATO DE RESPUESTA (JSON v√°lido √∫nicamente):
{
  "isFake": boolean,
  "confidence": number (0-100),
  "contentType": "real|fake|ai_generated",
  "classification": {
    "category": "real_news|false_news|ai_content|unclear",
    "reasoning": "Explicaci√≥n espec√≠fica del tipo de contenido detectado",
    "confidence": number (0-100)
  },
  "explanation": "Explicaci√≥n detallada basada en verificaci√≥n web. Menciona qu√© fuentes consultaste y qu√© encontraste.",
  "factors": [
    {
      "name": "Verificaci√≥n de fuentes",
      "description": "Resultado de b√∫squeda de las fuentes mencionadas en el texto",
      "impact": "high/medium/low",
      "webValidation": "URL o resultado de b√∫squeda espec√≠fico",
      "relatedArticles": ["URLs de art√≠culos relacionados encontrados"]
    },
    {
      "name": "Similitud con noticias verificadas", 
      "description": "Comparaci√≥n con noticias reales en medios establecidos",
      "impact": "high/medium/low",
      "similarSources": ["lista de medios donde se encontr√≥ informaci√≥n similar"],
      "relatedArticles": ["URLs espec√≠ficas de art√≠culos similares"]
    },
    {
      "name": "Detecci√≥n de contenido IA",
      "description": "An√°lisis de patrones que sugieren generaci√≥n artificial",
      "impact": "high/medium/low",
      "aiIndicators": ["patrones espec√≠ficos detectados"],
      "humanPatterns": ["patrones humanos encontrados o ausentes"]
    }
  ],
  "webVerification": {
    "sourcesFound": ["URLs de fuentes que confirman/desmienten la informaci√≥n"],
    "factCheckResults": ["Resultados de fact-checkers reconocidos"],
    "mediaPresence": "Descripci√≥n de presencia en medios establecidos",
    "contradictingSources": ["Fuentes que contradicen la informaci√≥n"],
    "relatedArticles": [
      {
        "title": "T√≠tulo del art√≠culo relacionado",
        "url": "URL del art√≠culo",
        "source": "Nombre del medio",
        "similarity": "high|medium|low",
        "relationship": "confirms|contradicts|related|same_topic"
      }
    ]
  },
  "recommendations": [
    "Enlaces espec√≠ficos para verificar la informaci√≥n",
    "Fuentes confiables donde buscar m√°s informaci√≥n",
    "Acciones espec√≠ficas basadas en hallazgos web"
  ],
  "summary": "Resumen basado en evidencia web encontrada"
}

INSTRUCCIONES CR√çTICAS:
- SIEMPRE menciona fuentes web espec√≠ficas encontradas o su ausencia
- Si detectas contenido IA, explica EXACTAMENTE qu√© patrones encontraste
- Proporciona URLs o nombres de medios donde verificaste la informaci√≥n
- Si no encuentras la noticia en medios establecidos, es una SE√ëAL DE ALERTA MAYOR`;

    const response = await axios.post(
      `https://generativelanguage.googleapis.com/v1beta/models/${config.gemini.model}:generateContent`,
      {
        contents: [
          {
            parts: [
              {
                text: `${systemPrompt}\n\nCONTENIDO A ANALIZAR:\n"${text}"\n\nPor favor, analiza este contenido y proporciona tu evaluaci√≥n en el formato JSON solicitado.`,
              },
            ],
          },
        ],
        safetySettings: config.gemini.safetySettings || [
          {
            category: "HARM_CATEGORY_HATE_SPEECH",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
          {
            category: "HARM_CATEGORY_DANGEROUS_CONTENT",
            threshold: "BLOCK_MEDIUM_AND_ABOVE",
          },
        ],
        generationConfig: config.gemini.generationConfig || {
          temperature: 0.2,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 2048,
        },
      },
      {
        headers: {
          "Content-Type": "application/json",
          "x-goog-api-key": config.gemini.apiKey,
        },
        timeout: config.analysis.timeouts.gemini,
      }
    );

    if (!response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
      throw new Error("Respuesta inv√°lida de Gemini API");
    }

    const content = response.data.candidates[0].content.parts[0].text;

    try {
      // Limpiar y parsear JSON
      const cleanContent = content
        .replace(/```json/gi, "")
        .replace(/```/g, "")
        .trim();

      const result = JSON.parse(cleanContent);

      // Validar y normalizar respuesta con nueva clasificaci√≥n
      const finalResult = {
        isFake: Boolean(result.isFake),
        confidence: Math.max(0, Math.min(100, Number(result.confidence) || 50)),
        contentType: result.contentType || (result.isFake ? "fake" : "real"),
        classification: result.classification || {
          category: result.isFake ? "false_news" : "real_news",
          reasoning: "Clasificaci√≥n basada en an√°lisis general",
          confidence: result.confidence || 50,
        },
        explanation:
          result.explanation || result.summary || "An√°lisis completado",
        factors: Array.isArray(result.factors) ? result.factors : [],
        recommendations: Array.isArray(result.recommendations)
          ? result.recommendations
          : [],
        summary: result.summary || result.explanation || "",
        webVerification: result.webVerification || null,
        source: "Google Gemini",
        model: config.gemini.model,
      };

      console.log("‚úÖ Google Gemini 2.0 analysis completed");
      return finalResult;
    } catch (parseError) {
      console.error("‚ùå Error parseando respuesta de Gemini:", parseError);

      // Fallback: an√°lisis b√°sico del texto de respuesta
      const isFake =
        content.toLowerCase().includes("falsa") ||
        content.toLowerCase().includes("no confiable") ||
        content.toLowerCase().includes("enga√±osa");

      return {
        isFake,
        confidence: 50,
        explanation:
          "El an√°lisis se complet√≥ pero hubo problemas al procesar la respuesta detallada. Se recomienda verificar la informaci√≥n con fuentes adicionales.",
        factors: [
          {
            name: "An√°lisis t√©cnico limitado",
            description:
              "No se pudo procesar completamente la respuesta del sistema de IA",
            impact: "medium",
          },
        ],
        recommendations: [
          "Verifica la informaci√≥n en fuentes oficiales",
          "Busca la misma noticia en medios reconocidos",
          "Consulta fact-checkers especializados",
        ],
        summary: "An√°lisis completado con limitaciones t√©cnicas",
        source: "Google Gemini",
        model: config.gemini.model,
      };
    }
  } catch (error) {
    console.error("‚ùå Google Gemini API error:", error.message);

    // Errores espec√≠ficos con mensajes claros
    if (error.response?.status === 429) {
      throw new Error(
        "El servicio est√° temporalmente sobrecargado. Intenta de nuevo en unos minutos."
      );
    }
    if (error.response?.status === 403) {
      throw new Error("Error de autenticaci√≥n con el servicio de IA.");
    }
    if (error.response?.status === 400) {
      throw new Error(
        "El contenido no pudo ser analizado. Intenta con un texto diferente."
      );
    }

    throw new Error(
      "No se pudo completar el an√°lisis con IA. Intenta de nuevo m√°s tarde."
    );
  }
};

// Combinar todos los an√°lisis disponibles con IA mejorada
const combineAllAnalysis = (results, verificationResults, isUrl) => {
  const availableResults = Object.entries(results)
    .filter(([, result]) => result !== null)
    .map(([key, result]) => ({ source: key, ...result }));

  if (availableResults.length === 0) {
    throw new Error("No hay resultados de an√°lisis disponibles");
  }

  console.log(
    `üîÑ Combinando ${availableResults.length} an√°lisis con verificaci√≥n externa...`
  );

  // Calcular confianza ponderada con pesos mejorados
  let totalConfidence = 0;
  let totalWeight = 0;
  const allFactors = [];
  const details = {};

  // Pesos mejorados: Gemini tiene m√°s peso, Hugging Face menos, Local m√≠nimo
  const weights = {
    gemini: 0.6, // 60% - IA m√°s avanzada
    huggingface: 0.3, // 30% - IA especializada
    local: 0.1, // 10% - An√°lisis b√°sico
  };

  availableResults.forEach(result => {
    const weight = weights[result.source] || 0.1;
    totalConfidence += result.confidence * weight;
    totalWeight += weight;

    // Agregar factores con fuente identificada
    if (result.factors) {
      allFactors.push(
        ...result.factors.map(factor => ({
          ...factor,
          source: result.source,
          aiType: getAIType(result.source),
        }))
      );
    }

    // Agregar detalles
    if (result.details) {
      details[result.source] = result.details;
    }
  });

  // Aplicar factor de verificaci√≥n externa
  let finalConfidence = Math.round(totalConfidence / totalWeight);

  if (verificationResults) {
    // Calcular si es fake basado en la confianza inicial
    const initialIsFake = finalConfidence > config.analysis.thresholds.fake;

    // Ajustar el credibilityScore basado en el an√°lisis de IA
    const adjustedCredibilityScore = initialIsFake
      ? Math.min(verificationResults.credibilityScore, 60) // Si es fake, m√°ximo 60%
      : Math.max(verificationResults.credibilityScore, 40); // Si es ver√≠dica, m√≠nimo 40%

    finalConfidence = Math.round(
      finalConfidence * 0.7 + adjustedCredibilityScore * 0.3
    );

    // Actualizar el credibilityScore para que sea consistente
    verificationResults.credibilityScore = adjustedCredibilityScore;

    // Agregar factores de verificaci√≥n
    if (verificationResults.recommendations) {
      verificationResults.recommendations.forEach(rec => {
        allFactors.push({
          name: "Verificaci√≥n Externa",
          description: rec,
          impact: "high",
          source: "verification",
          aiType: "human",
        });
      });
    }
  }

  const isFake = finalConfidence > config.analysis.thresholds.fake;

  // Calcular porcentajes IA vs Humano
  const aiAnalysis = calculateAIAnalysis(availableResults, allFactors);
  const humanAnalysis = calculateHumanAnalysis(verificationResults);

  // Determinar modelo usado
  const modelsUsed = availableResults.map(r => r.source).join(" + ");
  const modelName = verificationResults
    ? `IA Avanzada + Verificaci√≥n Humana (${modelsUsed})`
    : `IA Avanzada (${modelsUsed})`;

  // Generar explicaci√≥n detallada
  const explanation = generateDetailedExplanation(
    finalConfidence,
    isFake,
    allFactors,
    verificationResults,
    aiAnalysis,
    humanAnalysis
  );

  // Preparar respuesta extendida
  const response = {
    isFake,
    confidence: finalConfidence,
    factors: allFactors,
    model: modelName,
    details: {
      ...details,
      sources: availableResults.map(r => r.source),
      individualResults: availableResults.map(r => ({
        source: r.source,
        confidence: r.confidence,
        isFake: r.isFake,
        aiType: getAIType(r.source),
      })),
      isUrl,
      analysisType: isUrl ? "URL Analysis" : "Text Analysis",
      aiAnalysis,
      humanAnalysis,
    },
    explanation: explanation,
    verdict: isFake ? "NO VER√çDICA" : "VER√çDICA",
    confidenceLevel: getConfidenceLevel(finalConfidence),
  };

  // Agregar informaci√≥n de verificaci√≥n si est√° disponible
  if (verificationResults) {
    response.verification = {
      sourceAnalysis: verificationResults.sourceAnalysis,
      relatedArticles: verificationResults.relatedArticles,
      externalVerification: verificationResults.externalVerification,
      credibilityScore: verificationResults.credibilityScore,
      recommendations: verificationResults.recommendations,
    };
  }

  return response;
};

// Funci√≥n para obtener el tipo de IA
const getAIType = source => {
  switch (source) {
    case "gemini":
      return "IA Avanzada (Gemini)";
    case "huggingface":
      return "IA Especializada (Hugging Face)";
    case "local":
      return "An√°lisis Local";
    case "verification":
      return "Verificaci√≥n Humana";
    default:
      return "An√°lisis";
  }
};

// Calcular an√°lisis de IA
const calculateAIAnalysis = (availableResults, allFactors) => {
  const aiFactors = allFactors.filter(f => f.source !== "verification");
  const aiConfidence =
    availableResults.reduce((sum, result) => {
      const weight =
        result.source === "gemini"
          ? 0.6
          : result.source === "huggingface"
            ? 0.3
            : 0.1;
      return sum + result.confidence * weight;
    }, 0) /
    availableResults.reduce((sum, result) => {
      const weight =
        result.source === "gemini"
          ? 0.6
          : result.source === "huggingface"
            ? 0.3
            : 0.1;
      return sum + weight;
    }, 0);

  return {
    confidence: Math.round(aiConfidence),
    factors: aiFactors.length,
    sources: availableResults.map(r => getAIType(r.source)),
    percentage: Math.round((aiConfidence / 100) * 70), // 70% del an√°lisis total
  };
};

// Calcular an√°lisis humano
const calculateHumanAnalysis = verificationResults => {
  if (!verificationResults) {
    return {
      confidence: 0,
      factors: 0,
      sources: [],
      percentage: 0,
    };
  }

  const humanFactors = verificationResults.recommendations
    ? verificationResults.recommendations.length
    : 0;
  const humanConfidence = verificationResults.credibilityScore || 50;

  return {
    confidence: humanConfidence,
    factors: humanFactors,
    sources: ["Verificaci√≥n Externa", "An√°lisis de Fuentes"],
    percentage: Math.round((humanConfidence / 100) * 30), // 30% del an√°lisis total
  };
};

// Funci√≥n para generar explicaci√≥n detallada mejorada
const generateDetailedExplanation = (
  confidence,
  isFake,
  factors,
  verificationResults,
  aiAnalysis,
  humanAnalysis
) => {
  let explanation = "";

  // Veredicto principal
  if (isFake) {
    explanation += `VEREDICTO: NO VER√çDICA Esta noticia presenta caracter√≠sticas t√≠picas de informaci√≥n no ver√≠dica con un nivel de confianza del ${finalConfidence}%.\n\n`;
  } else {
    explanation += `VEREDICTO: VER√çDICA Esta noticia presenta caracter√≠sticas de informaci√≥n ver√≠dica con un nivel de confianza del ${finalConfidence}%.\n\n`;
  }

  // An√°lisis IA vs Humano
  explanation += `AN√ÅLISIS INTELIGENTE: IA Avanzada (Gemini): ${aiAnalysis.confidence}% de confianza - IA Especializada (Hugging Face): An√°lisis de patrones - Verificaci√≥n Humana: ${humanAnalysis.confidence}% de credibilidad - Peso del an√°lisis: ${aiAnalysis.percentage}% IA / ${humanAnalysis.percentage}% Humano\n\n`;

  // Factores principales por tipo de IA
  if (factors && factors.length > 0) {
    explanation += `FACTORES DETECTADOS:\n`;

    // Agrupar factores por tipo de IA
    const geminiFactors = factors.filter(
      f =>
        f.source === "gemini" && (f.impact === "high" || f.impact === "medium")
    );
    const huggingfaceFactors = factors.filter(
      f =>
        f.source === "huggingface" &&
        (f.impact === "high" || f.impact === "medium")
    );
    const localFactors = factors.filter(
      f =>
        f.source === "local" && (f.impact === "high" || f.impact === "medium")
    );
    const humanFactors = factors.filter(f => f.source === "verification");

    if (geminiFactors.length > 0) {
      explanation += `IA Avanzada (Gemini):\n`;
      geminiFactors.slice(0, 3).forEach((factor, index) => {
        const indicator = factor.impact === "high" ? "CR√çTICO" : "IMPORTANTE";
        explanation += `${index + 1}. [${indicator}] ${factor.description}\n`;
      });
      explanation += "\n";
    }

    if (huggingfaceFactors.length > 0) {
      explanation += `IA Especializada (Hugging Face):\n`;
      huggingfaceFactors.slice(0, 2).forEach((factor, index) => {
        const indicator = factor.impact === "high" ? "ALERTA" : "AN√ÅLISIS";
        explanation += `${index + 1}. [${indicator}] ${factor.description}\n`;
      });
      explanation += "\n";
    }

    if (localFactors.length > 0) {
      explanation += `An√°lisis Local:\n`;
      localFactors.slice(0, 2).forEach((factor, index) => {
        const indicator = factor.impact === "high" ? "R√ÅPIDO" : "B√ÅSICO";
        explanation += `${index + 1}. [${indicator}] ${factor.description}\n`;
      });
      explanation += "\n";
    }

    if (humanFactors.length > 0) {
      explanation += `Verificaci√≥n Humana:\n`;
      humanFactors.slice(0, 3).forEach((factor, index) => {
        explanation += `${index + 1}. [VERIFICADO] ${factor.description}\n`;
      });
      explanation += "\n";
    }
  }

  // Fuentes consultadas
  if (
    verificationResults &&
    verificationResults.relatedArticles &&
    verificationResults.relatedArticles.length > 0
  ) {
    // Art√≠culos relacionados encontrados
    explanation += `ART√çCULOS RELACIONADOS ENCONTRADOS:\n`;
    verificationResults.relatedArticles
      .slice(0, 3)
      .forEach((article, index) => {
        explanation += `${index + 1}. ${article.title || article.url}\n`;
      });
    explanation += "\n";
  }

  // Recomendaciones
  if (
    verificationResults &&
    verificationResults.recommendations &&
    verificationResults.recommendations.length > 0
  ) {
    // Recomendaciones
    explanation += `RECOMENDACIONES:\n`;
    verificationResults.recommendations.forEach((rec, index) => {
      explanation += `${index + 1}. ${rec}\n`;
    });
    explanation += "\n";
  }

  // Explicaci√≥n final mejorada
  if (isFake) {
    explanation += `RAZONES PRINCIPALES:\n`;
    explanation += `‚Ä¢ IA Avanzada detect√≥: Patrones de desinformaci√≥n\n`;
    explanation += `‚Ä¢ IA Especializada confirm√≥: Caracter√≠sticas de fake news\n`;
    explanation += `‚Ä¢ Verificaci√≥n humana: Fuentes no confiables o contradictorias\n`;
    explanation += `‚Ä¢ An√°lisis local: Indicadores de manipulaci√≥n\n\n`;
    explanation += `RECOMENDACI√ìN: Esta informaci√≥n presenta m√∫ltiples se√±ales de alerta. Verifica con fuentes oficiales antes de compartir.`;
  } else {
    explanation += `RAZONES PRINCIPALES:\n`;
    explanation += `‚Ä¢ IA Avanzada confirm√≥: Informaci√≥n coherente y factual\n`;
    explanation += `‚Ä¢ IA Especializada valid√≥: Patrones de credibilidad\n`;
    explanation += `‚Ä¢ Verificaci√≥n humana: Fuentes confiables y verificables\n`;
    explanation += `‚Ä¢ An√°lisis local: Indicadores de objetividad\n\n`;
    explanation += `RECOMENDACI√ìN: Esta informaci√≥n parece confiable seg√∫n m√∫ltiples an√°lisis, pero siempre verifica con fuentes adicionales.`;
  }

  return explanation;
};

// Funci√≥n para obtener nivel de confianza
const getConfidenceLevel = confidence => {
  if (confidence >= 80) return "MUY ALTA";
  if (confidence >= 60) return "ALTA";
  if (confidence >= 40) return "MEDIA";
  if (confidence >= 20) return "BAJA";
  return "MUY BAJA";
};

module.exports = {
  analyzeText,
  performLocalAnalysis,
  analyzeWithHuggingFace,
  analyzeWithGemini,
  combineAllAnalysis,
};
